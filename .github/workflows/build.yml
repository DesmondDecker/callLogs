name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          liblzma-dev \
          unzip \
          wget \
          curl \
          zlib1g-dev \
          autoconf \
          libtool \
          pkg-config \
          cmake
          
    - name: Setup environment
      run: |
        echo "JAVA_HOME=${{ steps.setup-java.outputs.path }}" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "NDKAPI=21" >> $GITHUB_ENV
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: buildozer-global-
        
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: ${{ runner.os }}-buildozer-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.5.0 cython==0.29.36
        pip install -r requirements.txt
        
    - name: Create buildozer spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Call Center Sync
        package.name = callcentersync
        package.domain = com.callcenter.sync
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json
        version.regex = __version__ = ['"]([^'"]*)['"]
        version.filename = %(source.dir)s/main.py
        source.main = main.py
        requirements = python3,kivy==2.1.0,requests,pyjnius,android
        orientation = portrait
        services = 
        skip_dist = 1
        fullscreen = 0

        [android]
        android.api = 33
        android.minapi = 21
        android.ndk = 25b
        android.sdk = 33
        android.accept_sdk_license = True
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,READ_CALL_LOG,READ_PHONE_STATE,READ_CONTACTS,WAKE_LOCK
        android.archs = arm64-v8a,armeabi-v7a
        android.gradle_repositories = google(), mavenCentral()
        p4a.bootstrap = sdl2
        p4a.branch = master

        [buildozer]
        log_level = 2
        warn_on_root = 1
        build_dir = ./.buildozer
        bin_dir = ./bin
        EOF
        
    - name: Setup Android SDK for Buildozer compatibility
      run: |
        # Create the SDK directory
        SDK_PATH="$HOME/.buildozer/android/platform/android-sdk"
        mkdir -p "$SDK_PATH"
        cd "$SDK_PATH"
        
        echo "=== Setting up Android SDK at: $SDK_PATH ==="
        
        # Download command line tools
        echo "Downloading Android command line tools..."
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdtools.zip
        unzip -q cmdtools.zip
        rm cmdtools.zip
        
        # Create the expected directory structure for Buildozer
        # Buildozer expects tools/bin/sdkmanager, so we create that structure
        mkdir -p tools/bin
        mkdir -p tools/lib
        
        # Copy sdkmanager and related files to the expected location
        cp cmdline-tools/bin/* tools/bin/
        cp -r cmdline-tools/lib/* tools/lib/
        
        # Also keep the new structure for compatibility
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # Make executables
        chmod +x tools/bin/*
        chmod +x cmdline-tools/latest/bin/*
        
        # Set up PATH
        export PATH="$PATH:$SDK_PATH/tools/bin:$SDK_PATH/cmdline-tools/latest/bin"
        
        # Verify sdkmanager works
        echo "Verifying sdkmanager installation..."
        if ! "$SDK_PATH/tools/bin/sdkmanager" --version >/dev/null 2>&1; then
          echo "❌ sdkmanager setup failed"
          exit 1
        fi
        
        echo "✅ sdkmanager setup successful"
        
        # Accept licenses
        echo "Accepting Android SDK licenses..."
        yes | timeout 60 "$SDK_PATH/tools/bin/sdkmanager" --licenses --sdk_root="$SDK_PATH" >/dev/null 2>&1 || true
        
        # Install essential components
        echo "Installing Android SDK components..."
        "$SDK_PATH/tools/bin/sdkmanager" --install "platform-tools" --sdk_root="$SDK_PATH"
        "$SDK_PATH/tools/bin/sdkmanager" --install "build-tools;33.0.2" --sdk_root="$SDK_PATH"
        "$SDK_PATH/tools/bin/sdkmanager" --install "platforms;android-33" --sdk_root="$SDK_PATH"
        
        echo "✅ Android SDK setup completed"
        
        # Verify the structure Buildozer expects
        echo "Verifying SDK structure for Buildozer:"
        ls -la "$SDK_PATH/tools/bin/" | head -5
        
    - name: Verify environment before build
      run: |
        echo "=== Environment Verification ==="
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "Java version:"
        java -version
        
        # Check if sdkmanager exists where Buildozer expects it
        EXPECTED_SDKMANAGER="$HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager"
        if [ -f "$EXPECTED_SDKMANAGER" ]; then
          echo "✅ sdkmanager found at expected location: $EXPECTED_SDKMANAGER"
          if "$EXPECTED_SDKMANAGER" --version >/dev/null 2>&1; then
            echo "✅ sdkmanager is functional"
          else
            echo "⚠️ sdkmanager exists but may not be functional"
          fi
        else
          echo "❌ sdkmanager not found at expected location"
          echo "Searching for sdkmanager..."
          find "$HOME/.buildozer" -name "sdkmanager" -type f 2>/dev/null || echo "No sdkmanager found"
        fi
        
    - name: Build APK
      run: |
        echo "=== Starting APK Build ==="
        echo "Build environment:"
        echo "  JAVA_HOME: $JAVA_HOME"
        echo "  ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        # Start the build
        buildozer android debug --verbose
        
    - name: List build results
      run: |
        echo "=== Build Results ==="
        echo "Contents of bin directory:"
        ls -la bin/ 2>/dev/null || echo "No bin directory found"
        
        echo "Searching for APK files:"
        find . -name "*.apk" -type f -exec ls -la {} \; 2>/dev/null || echo "No APK files found"
        
        echo "Build directory structure:"
        ls -la .buildozer/android/platform/ 2>/dev/null | head -10
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: call-center-sync-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-*/outputs/apk/**/*.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-failure
        path: |
          .buildozer/android/platform/build-*/logs/
          .buildozer/android/platform/python-for-android/
          .buildozer/android/platform/build.log
          .buildozer/android/platform/logcat.txt
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*.apk
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}