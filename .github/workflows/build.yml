name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          wget \
          curl \
          autoconf \
          automake \
          libtool \
          libtool-bin \
          autotools-dev \
          autoconf-archive \
          pkg-config \
          gettext \
          m4 \
          zlib1g-dev \
          libssl-dev \
          libffi-dev \
          libsqlite3-dev \
          libbz2-dev \
          libreadline-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          liblzma-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          ccache \
          zip \
          openjdk-11-jdk
        
    - name: Setup Android SDK
      run: |
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        
        # Create SDK directory structure
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        
        # Download and extract command-line tools
        cd "$ANDROID_SDK_ROOT/cmdline-tools"
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
        mv cmdline-tools latest
        rm cmdline-tools.zip
        
        # Add to PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH
        
    - name: Install Android SDK components
      run: |
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        
        # Accept licenses
        yes | $SDKMANAGER --licenses > /dev/null 2>&1 || true
        
        # Install components
        $SDKMANAGER "build-tools;33.0.2"
        $SDKMANAGER "platforms;android-33"
        $SDKMANAGER "platform-tools"
        $SDKMANAGER "cmake;3.22.1"
        $SDKMANAGER "ndk;25.1.8937393"
        
        # Set NDK environment
        export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.1.8937393
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache Buildozer directories
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}-v3
        restore-keys: |
          ${{ runner.os }}-buildozer-v3-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install -r requirements.txt
        
    - name: Verify buildozer.spec exists
      run: |
        if [ ! -f buildozer.spec ]; then
          echo "Creating buildozer.spec from paste.txt content..."
          cat > buildozer.spec << 'EOF'
        [app]
        title = Kortahun United
        package.name = kortahununited
        package.domain = com.kortahununited
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,json
        source.exclude_dirs = tests, bin, .git, .github, __pycache__, .pytest_cache
        version = 1.0.5
        requirements = python3,kivy==2.1.0,kivymd==1.1.1,requests==2.31.0,urllib3==2.0.7,pyjnius,android
        orientation = portrait
        fullscreen = 0
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,READ_CALL_LOG,READ_PHONE_STATE,READ_CONTACTS
        android.logcat_filters = *:S python:D
        android.archs = arm64-v8a, armeabi-v7a
        android.allow_backup = True
        android.api = 33
        android.minapi = 21
        android.ndk = 25b
        android.ndk_api = 21
        android.accept_sdk_license = True
        android.private_storage = True
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        EOF
        fi
        
        echo "‚úÖ buildozer.spec content:"
        head -20 buildozer.spec
        
    - name: Setup build environment
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.1.8937393
        export NDK_HOME=$ANDROID_NDK_ROOT
        export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/33.0.2:$PATH
        
        # Persist to GitHub environment
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
        # Build tool settings
        echo "USE_SDK_WRAPPER=1" >> $GITHUB_ENV
        echo "ANDROID_SDK_BUILD_TOOLS_VERSION=33.0.2" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "NDKAPI=21" >> $GITHUB_ENV
        
        # Verify installations
        echo "üîç Verifying Android tools:"
        ls -la "$ANDROID_SDK_ROOT/build-tools/33.0.2/" || echo "‚ùå build-tools not found"
        ls -la "$ANDROID_SDK_ROOT/platforms/android-33/" || echo "‚ùå platform not found"
        ls -la "$ANDROID_NDK_ROOT/" || echo "‚ùå NDK not found"
        
        # Java settings
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "JDK_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        
    - name: Initialize buildozer
      run: |
        # Initialize buildozer (this will create necessary directories)
        buildozer android clean || echo "Clean failed, continuing..."
        
        # Set up buildozer environment
        mkdir -p .buildozer/android/platform/
        
    - name: Build APK with Buildozer
      run: |
        echo "üöÄ Starting APK build..."
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        # Verify environment
        echo "Environment check:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
        echo "Java version: $(java -version 2>&1 | head -n 1)"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version)"
        
        # Build with increased verbosity and error handling
        set -e
        buildozer -v android debug 2>&1 | tee build.log || {
          echo "‚ùå Build failed! Last 50 lines of build log:"
          tail -50 build.log
          echo "üìã Full build log saved as artifact"
          exit 1
        }
        
        # Verify APK was created
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "‚úÖ APK build successful!"
          ls -la bin/
          
          # Get APK info
          APK_FILE=$(ls bin/*.apk | head -1)
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          echo "üì¶ APK: $APK_FILE (Size: $APK_SIZE)"
        else
          echo "‚ùå No APK found in bin/ directory"
          echo "Contents of bin directory:"
          ls -la bin/ || echo "bin directory does not exist"
          exit 1
        fi
        
    - name: Upload build log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-log-${{ github.sha }}
        path: build.log
        retention-days: 7
        
    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: kortahun-united-apk-${{ github.sha }}
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload APK to release
      if: github.event_name == 'release' && success()
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        name: "Kortahun United v${{ github.ref_name }}"
        body: |
          ## Kortahun United Android App
          
          **Version:** ${{ github.ref_name }}
          **Build:** ${{ github.sha }}
          **Built:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          ### Features
          - Real Android call log tracking
          - Backend synchronization
          - QR code device registration
          - Automatic heartbeat monitoring
          
          ### Requirements
          - Android 5.0+ (API 21+)
          - Internet connection for sync
          - Call log permissions
          
          **Download the APK below and enable "Install from unknown sources" in your Android settings.**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build summary
      if: always()
      run: |
        echo "## üì± Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Runner:** ubuntu-22.04" >> $GITHUB_STEP_SUMMARY
        echo "**Java:** 11" >> $GITHUB_STEP_SUMMARY
        echo "**Python:** 3.9" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f bin/*.apk ]; then
          APK_FILE=$(ls bin/*.apk | head -1)
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          echo "**‚úÖ Build Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "**üì¶ APK:** $(basename "$APK_FILE")" >> $GITHUB_STEP_SUMMARY
          echo "**üíæ Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY
        else
          echo "**‚ùå Build Status:** FAILED" >> $GITHUB_STEP_SUMMARY
        fi