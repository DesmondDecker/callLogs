name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'  # Updated to Java 17 for better Android support
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 31
        build-tools: 31.0.0
        
    - name: Debug Android SDK setup
      run: |
        echo "=== Android SDK Debug Info ==="
        echo "ANDROID_SDK_ROOT from action: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME from action: $ANDROID_HOME"
        echo "Current PATH: $PATH"
        
        # Check if SDK root exists
        if [ -d "$ANDROID_SDK_ROOT" ]; then
          echo "✅ ANDROID_SDK_ROOT directory exists"
          ls -la $ANDROID_SDK_ROOT/
        else
          echo "❌ ANDROID_SDK_ROOT directory does not exist"
        fi
        
        # Check cmdline-tools
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" ]; then
          echo "✅ cmdline-tools found"
          ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/
        else
          echo "❌ cmdline-tools not found"
          find $ANDROID_SDK_ROOT -name "sdkmanager" -type f 2>/dev/null || echo "No sdkmanager found"
        fi
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-
        
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          python3-venv \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          liblzma-dev \
          openjdk-17-jdk \
          unzip \
          zlib1g-dev \
          autoconf \
          libtool \
          pkg-config \
          cmake
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.5.0 cython==0.29.36
        pip install -r requirements.txt
        
    - name: Set Android environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        # Use dynamic build-tools version based on what was found
        BUILD_TOOLS_VERSION=${BUILD_TOOLS_VERSION:-31.0.0}
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> $GITHUB_ENV
        
    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Force install build-tools and verify aidl
      run: |
        echo "=== Force Installing Build-Tools ==="
        
        # Ensure ANDROID_SDK_ROOT is set
        if [ -z "$ANDROID_SDK_ROOT" ]; then
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          echo "Set ANDROID_SDK_ROOT to: $ANDROID_SDK_ROOT"
        fi
        
        # Find sdkmanager
        SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        if [ ! -f "$SDKMANAGER" ]; then
          echo "❌ sdkmanager not found at: $SDKMANAGER"
          find $ANDROID_SDK_ROOT -name "sdkmanager" -type f 2>/dev/null || echo "No sdkmanager found"
          exit 1
        fi
        
        echo "Using sdkmanager: $SDKMANAGER"
        
        # Force install build-tools with explicit versions
        echo "Force installing build-tools 31.0.0..."
        $SDKMANAGER --install "build-tools;31.0.0" --verbose || echo "31.0.0 install failed"
        
        echo "Force installing build-tools 30.0.3..."
        $SDKMANAGER --install "build-tools;30.0.3" --verbose || echo "30.0.3 install failed"
        
        echo "Force installing platform-tools..."
        $SDKMANAGER --install "platform-tools" --verbose || echo "platform-tools install failed"
        
        # Check what was actually installed
        echo "=== Build-tools verification ==="
        echo "Contents of build-tools directory:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ 2>/dev/null || echo "Build-tools directory not found"
        
        # Check each version
        for version in 31.0.0 30.0.3; do
          echo "--- Checking build-tools/$version ---"
          if [ -d "$ANDROID_SDK_ROOT/build-tools/$version" ]; then
            echo "Directory exists, listing contents:"
            ls -la $ANDROID_SDK_ROOT/build-tools/$version/ | head -15
            
            # Check for aidl specifically
            if [ -f "$ANDROID_SDK_ROOT/build-tools/$version/aidl" ]; then
              echo "✅ aidl found at: $ANDROID_SDK_ROOT/build-tools/$version/aidl"
              ls -la $ANDROID_SDK_ROOT/build-tools/$version/aidl
              
              # Test aidl execution
              if $ANDROID_SDK_ROOT/build-tools/$version/aidl --help >/dev/null 2>&1; then
                echo "✅ aidl is executable and working in version $version"
                echo "WORKING_BUILD_TOOLS_VERSION=$version" >> $GITHUB_ENV
                break
              else
                echo "⚠️  aidl exists but not executable in version $version"
              fi
            else
              echo "❌ aidl NOT found in build-tools/$version"
            fi
          else
            echo "❌ build-tools/$version directory not found"
          fi
        done
        
        # Global search for aidl if not found in expected locations
        echo "=== Global aidl search ==="
        find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "No aidl found anywhere in SDK"
        
        # Final check - fail if no working aidl found
        if [ -z "${WORKING_BUILD_TOOLS_VERSION:-}" ]; then
          echo "❌ CRITICAL: No working aidl found in any build-tools version!"
          echo "Available SDK contents:"
          ls -la $ANDROID_SDK_ROOT/
          exit 1
        fi
        
        echo "✅ SUCCESS: Working aidl found in build-tools version: $WORKING_BUILD_TOOLS_VERSION"
        
    - name: Ensure build-tools in PATH
      run: |
        # Use the working build-tools version found in previous step
        WORKING_VERSION=${WORKING_BUILD_TOOLS_VERSION:-31.0.0}
        echo "Adding build-tools/$WORKING_VERSION to PATH"
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/build-tools/$WORKING_VERSION" >> $GITHUB_ENV
        echo "BUILD_TOOLS_VERSION=$WORKING_VERSION" >> $GITHUB_ENV
        
    - name: Install remaining Android SDK components
      run: |
        echo "=== Installing Remaining SDK Components ==="
        
        # Ensure ANDROID_SDK_ROOT is set
        if [ -z "$ANDROID_SDK_ROOT" ]; then
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
        fi
        
        SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        
        # Install remaining components (build-tools already installed in previous step)
        echo "Installing platforms..."
        $SDKMANAGER --install 'platforms;android-31' --verbose || echo "platforms install failed"
        
        echo "Installing NDK..."
        $SDKMANAGER --install 'ndk;25.1.8937393' --verbose || echo "NDK install failed"
        
        # Verify final installation
        echo "=== Final SDK verification ==="
        echo "Platform-tools:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ | head -5 || echo "Platform-tools not found"
        
        echo "Platforms:"
        ls -la $ANDROID_SDK_ROOT/platforms/ 2>/dev/null || echo "Platforms not found"
        
        echo "NDK:"
        ls -la $ANDROID_SDK_ROOT/ndk*/ 2>/dev/null | head -5 || echo "NDK not found"
        
    - name: Create buildozer spec file
      run: |
        # Use the build-tools version that was successfully found
        BUILD_TOOLS_VERSION=${BUILD_TOOLS_VERSION:-31.0.0}
        echo "Creating buildozer.spec with BUILD_TOOLS_VERSION: $BUILD_TOOLS_VERSION"
        
        cat > buildozer.spec << EOF
        [app]
        # Application configuration
        title = Call Center Sync
        package.name = callcentersync
        package.domain = com.callcenter.sync

        # Source code settings
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json

        # Application version extracted from main.py
        version.regex = __version__ = ['"]([^'"]*)['"]
        version.filename = %(source.dir)s/main.py

        # Entry point
        source.main = main.py

        # Requirements - essential only
        requirements = python3,kivy==2.1.0,requests,pyjnius,android

        # Supported orientations
        orientation = portrait

        # Services (none needed for this app)
        services = 

        # Skip dist info
        skip_dist = 1

        [android]
        # Android API settings - match installed components
        android.api = 31
        android.minapi = 21
        android.ndk = 25b
        android.sdk = 31

        # Explicit SDK and NDK paths
        android.sdk_path = \$ANDROID_SDK_ROOT
        android.ndk_path = \$ANDROID_SDK_ROOT/ndk/25.1.8937393

        # Accept SDK license
        android.accept_sdk_license = True

        # Permissions required by the app
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,READ_CALL_LOG,READ_PHONE_STATE,READ_CONTACTS,WAKE_LOCK

        # Architecture - focus on common ones for CI
        android.archs = arm64-v8a,armeabi-v7a

        # Application metadata
        android.meta_data = 

        # Gradle dependencies (none needed)
        android.gradle_dependencies = 

        # Bootstrap
        p4a.bootstrap = sdl2

        # Build tools version - matches what we found
        android.gradle_repositories = google(), mavenCentral()

        # Ensure buildozer uses the correct build-tools
        android.ant_path = $ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION

        [buildozer]
        # Buildozer settings
        log_level = 2
        warn_on_root = 1

        # Build directory
        build_dir = ./.buildozer

        # Binary directory  
        bin_dir = ./bin
        EOF
        
        echo "Generated buildozer.spec:"
        cat buildozer.spec
        
    - name: Initialize and build APK
      run: |
        echo "=== Build Environment Setup ==="
        
        # Ensure all environment variables are set correctly
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-$HOME/android-sdk}
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # Use the working build-tools version that was verified earlier
        WORKING_VERSION=${BUILD_TOOLS_VERSION:-31.0.0}
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/$WORKING_VERSION
        
        # Debug environment
        echo "Environment variables:"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "BUILD_TOOLS_VERSION: $WORKING_VERSION"
        echo "PATH: $PATH"
        
        # Final verification before build
        echo "=== Pre-build Verification ==="
        echo "Java version:"
        java -version 2>&1 | head -3
        
        echo "Final aidl verification:"
        AIDL_PATH="$ANDROID_SDK_ROOT/build-tools/$WORKING_VERSION/aidl"
        if [ -f "$AIDL_PATH" ]; then
          echo "✅ aidl confirmed at: $AIDL_PATH"
          ls -la "$AIDL_PATH"
          
          # Test aidl one more time
          if "$AIDL_PATH" --help >/dev/null 2>&1; then
            echo "✅ aidl is executable and ready"
          else
            echo "❌ aidl exists but cannot execute - checking permissions"
            chmod +x "$AIDL_PATH" 2>/dev/null || echo "Cannot set execute permission"
          fi
        else
          echo "❌ FATAL: aidl still not found at expected location: $AIDL_PATH"
          echo "Searching for aidl one final time:"
          find $ANDROID_SDK_ROOT -name "aidl" -type f -exec ls -la {} \; 2>/dev/null || echo "No aidl found"
          exit 1
        fi
        
        # Verify buildozer can see the environment
        echo "=== Buildozer Environment Check ==="
        which python3
        python3 -c "import os; print('ANDROID_SDK_ROOT in env:', os.environ.get('ANDROID_SDK_ROOT', 'NOT SET'))"
        python3 -c "import os; print('PATH contains build-tools:', '$ANDROID_SDK_ROOT/build-tools/$WORKING_VERSION' in os.environ.get('PATH', ''))"
        
        # Build the APK with verbose output
        echo "=== Starting Build ==="
        buildozer android debug --verbose
        
    - name: List built files
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        echo "Looking for APK files:"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: call-center-sync-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-**/outputs/apk/**/*.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload build logs (on failure)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/build-*/logs/
          .buildozer/android/platform/python-for-android/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*.apk
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}