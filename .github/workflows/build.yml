name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v5
    
    - name: Cache Buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-v5
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Install essential build tools first
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk python3-pip \
          build-essential pkg-config cmake ninja-build ccache \
          libffi-dev libssl-dev zlib1g-dev libncurses5-dev \
          libncursesw5-dev libbz2-dev libreadline-dev libsqlite3-dev \
          wget curl llvm tk-dev libpng-dev libfreetype6-dev
        
        # Clean and install autotools properly
        sudo apt-get remove --purge -y libtool automake autoconf || true
        sudo apt-get autoremove -y && sudo apt-get autoclean
        
        sudo apt-get install -y autoconf automake libtool autotools-dev m4 gettext-base
        
        # Verify critical autotools files exist
        echo "Verifying autotools installation:"
        for file in ltoptions.m4 ltsugar.m4 ltversion.m4 lt~obsolete.m4; do
          if [ ! -f "/usr/share/aclocal/$file" ]; then
            echo "ERROR: $file missing"
            exit 1
          fi
          echo "✅ $file found"
        done
        
        # Install Python dependencies with specific versions
        pip3 install --upgrade pip setuptools wheel
        pip3 install buildozer==1.4.0 cython==0.29.33
    
    - name: Setup Android SDK and NDK
      run: |
        # Clean existing Android setup
        rm -rf $HOME/.buildozer/android/platform/android-sdk
        rm -rf $HOME/.buildozer/android/platform/android-ndk*
        mkdir -p $HOME/.buildozer/android/platform
        
        # Download Android SDK Command Line Tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/cmdline-tools
        mv cmdline-tools $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest
        
        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        
        # Accept licenses and install SDK components
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
          "platform-tools" "build-tools;34.0.0" "build-tools;33.0.2" \
          "platforms;android-34" "platforms;android-33" "platforms;android-24"
        
        # Download Android NDK r25b
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip
        mv android-ndk-r25b $HOME/.buildozer/android/platform/android-ndk-r25b
        
        # Set GitHub environment variables
        echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "ANDROIDAPI=34" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=24" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
    
    - name: Create SDK compatibility symlinks
      run: |
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
        ln -sf $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager \
               $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        ln -sf $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager \
               $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # Test sdkmanager works
        $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager --version
    
    - name: Create missing Python files
      run: |
        # Create config.py with Cython language level fix
        if [ ! -f "config.py" ]; then
          cat > config.py << 'EOF'
        # cython: language_level=3
        # config.py - Application configuration
        
        import platform
        import uuid
        import os
        import json
        from typing import Optional, List, Dict
        
        def is_android() -> bool:
            """Check if running on Android platform"""
            try:
                import jnius
                return True
            except ImportError:
                return platform.system().lower() == 'android'
        
        def get_platform_name() -> str:
            """Get current platform name"""
            if is_android():
                return "Android"
            return platform.system()
        
        class AppConfig:
            """Application configuration and constants"""
            
            APP_NAME = "Kortahun United Call Logger"
            VERSION = "2.0.0"
            
            API_URLS = [
                "https://kortahun-api.herokuapp.com",
                "https://kortahun-backend.onrender.com",
                "https://api.kortahununited.com",
                "http://192.168.1.100:3000",
                "http://localhost:3000"
            ]
            
            CONNECTIVITY_TEST_URLS = [
                "https://www.google.com",
                "https://httpbin.org/status/200",
                "https://jsonplaceholder.typicode.com/posts/1"
            ]
            
            @classmethod
            def get_api_urls(cls) -> List[str]:
                return cls.API_URLS.copy()
            
            @classmethod
            def get_device_info(cls) -> Dict:
                return {
                    "platform": get_platform_name(),
                    "version": cls.VERSION,
                    "app_name": cls.APP_NAME,
                    "python_version": platform.python_version(),
                    "architecture": platform.machine()
                }
            
            @classmethod
            def get_user_id(cls) -> str:
                user_id = StorageManager.load('user_id')
                if not user_id:
                    user_id = f"user_{uuid.uuid4().hex[:8]}"
                    StorageManager.save('user_id', user_id)
                return user_id
            
            @classmethod
            def generate_device_id(cls) -> str:
                device_id = StorageManager.load('device_id')
                if not device_id:
                    device_id = f"device_{uuid.uuid4().hex[:12]}"
                    StorageManager.save('device_id', device_id)
                return device_id
        
        class StorageManager:
            """File-based storage manager"""
            STORAGE_DIR = ".kortahun_data"
            
            @classmethod
            def _ensure_storage_dir(cls):
                if not os.path.exists(cls.STORAGE_DIR):
                    os.makedirs(cls.STORAGE_DIR, exist_ok=True)
            
            @classmethod
            def save(cls, key: str, value: str) -> bool:
                try:
                    cls._ensure_storage_dir()
                    file_path = os.path.join(cls.STORAGE_DIR, f"{key}.txt")
                    with open(file_path, 'w') as f:
                        f.write(value)
                    return True
                except Exception as e:
                    print(f"Storage save error: {e}")
                    return False
            
            @classmethod
            def load(cls, key: str) -> Optional[str]:
                try:
                    file_path = os.path.join(cls.STORAGE_DIR, f"{key}.txt")
                    if os.path.exists(file_path):
                        with open(file_path, 'r') as f:
                            return f.read().strip()
                except Exception as e:
                    print(f"Storage load error: {e}")
                return None
        EOF
        fi
        
        # Create main.py with Cython language level fix
        if [ ! -f "main.py" ]; then
          cat > main.py << 'EOF'
        # cython: language_level=3
        # main.py - Kortahun United Call Logger Main Application
        
        import kivy
        kivy.require('2.1.0')
        
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button
        from kivy.clock import Clock
        from kivy.logger import Logger
        
        from backend_detector import initialize_backend
        from config import AppConfig, is_android
        
        class MainWidget(BoxLayout):
            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.orientation = 'vertical'
                self.padding = 20
                self.spacing = 10
                
                # Title
                title = Label(
                    text=AppConfig.APP_NAME,
                    font_size=24,
                    size_hint_y=None,
                    height=60
                )
                self.add_widget(title)
                
                # Status label
                self.status_label = Label(
                    text="Initializing...",
                    font_size=16,
                    text_size=(None, None)
                )
                self.add_widget(self.status_label)
                
                # Initialize backend button
                init_button = Button(
                    text="Initialize Backend",
                    size_hint_y=None,
                    height=50
                )
                init_button.bind(on_press=self.initialize_backend)
                self.add_widget(init_button)
                
                # Auto-initialize
                Clock.schedule_once(self.auto_initialize, 1.0)
            
            def auto_initialize(self, dt):
                self.initialize_backend(None)
            
            def initialize_backend(self, instance):
                self.status_label.text = "Connecting to backend..."
                
                def init_callback(dt):
                    try:
                        success = initialize_backend()
                        if success:
                            self.status_label.text = "✅ Backend connected!\n\nReady to log calls."
                        else:
                            self.status_label.text = "❌ Backend connection failed.\n\nCheck internet and try again."
                    except Exception as e:
                        self.status_label.text = f"❌ Error:\n{str(e)}"
                        Logger.error(f"Backend error: {e}")
                
                Clock.schedule_once(init_callback, 0.1)
        
        class KortahunUnitedsApp(App):
            def build(self):
                self.title = AppConfig.APP_NAME
                return MainWidget()
        
        if __name__ == '__main__':
            app = KortahunUnitedsApp()
            app.run()
        EOF
        fi
        
        # Add Cython language level to backend_detector.py if missing
        if ! grep -q "# cython: language_level=3" backend_detector.py; then
          sed -i '1i# cython: language_level=3' backend_detector.py
        fi
    
    - name: Create corrected buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Kortahun United Call Logger
        package.name = kortahuncalllogger
        package.domain = com.kortahununited
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,json,txt
        source.include_patterns = assets/*,data/*,*.py
        version = 2.0.0
        
        # Fixed requirements - added requests explicitly
        requirements = python3,kivy==2.1.0,requests>=2.25.0,urllib3,pyjnius,android,plyer,pillow,certifi,charset-normalizer,idna
        
        presplash.filename = %(source.dir)s/presplash.png
        icon.filename = %(source.dir)s/icon.png
        orientation = portrait
        fullscreen = 0
        
        #
        # Android specific - FIXED permissions and features
        #
        
        android.presplash_color = #1E3A8A
        
        # Fixed: Removed problematic permissions, proper format
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,ACCESS_WIFI_STATE,READ_CALL_LOG,READ_PHONE_STATE,READ_CONTACTS,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,WAKE_LOCK
        
        # Fixed: Use proper manifest XML addition instead of invalid --feature argument
        android.add_manifest_xml = <uses-feature android:name="android.hardware.telephony" android:required="false" />
        
        # Updated API versions for better compatibility
        android.api = 34
        android.minapi = 24
        android.ndk = 25b
        android.ndk_api = 24
        
        android.private_storage = True
        android.skip_update = False
        android.accept_sdk_license = True
        android.apptheme = "@android:style/Theme.NoTitleBar"
        android.enable_androidx = True
        
        # Java compatibility
        android.add_compile_options = "sourceCompatibility = 1.8", "targetCompatibility = 1.8"
        android.gradle_repositories = "google()", "mavenCentral()", "gradlePluginPortal()"
        
        # Fixed: Better packaging options to avoid build conflicts
        android.add_packaging_options = "exclude 'META-INF/DEPENDENCIES'", "exclude 'META-INF/LICENSE'", "exclude 'META-INF/LICENSE.txt'", "exclude 'META-INF/NOTICE'", "exclude 'META-INF/NOTICE.txt'", "exclude 'META-INF/*.kotlin_module'", "exclude 'META-INF/common.kotlin_module'"
        
        android.manifest.launch_mode = singleTop
        android.wakelock = True
        android.logcat_filters = *:S python:D KortahunUnited:D
        android.copy_libs = 1
        android.archs = arm64-v8a, armeabi-v7a
        android.numeric_version = 20
        android.allow_backup = True
        android.release_artifact = aab
        android.debug_artifact = apk
        
        #
        # Python for android (p4a) specific
        #
        
        p4a.branch = master
        p4a.bootstrap = sdl2
        p4a.private_storage = True
        
        #
        # Buildozer settings
        #
        
        log_level = 2
        warn_on_root = 1
        build_dir = ./.buildozer
        bin_dir = ./bin
        
        # Fixed: Comprehensive exclusions to avoid problematic files
        [buildozer:source.exclude_patterns]
        license
        *.pyc
        *.pyo
        *.git*
        */__pycache__/*
        */.*
        *~
        *.bak
        *.swp
        *.tmp
        .DS_Store
        Thumbs.db
        .buildozer/*
        bin/*
        venv/*
        env/*
        .env
        *.log
        tests/*
        test_*
        *_test.py
        README.md
        *.md
        docs/*
        */test/*
        */tests/*
        **/test/**
        **/tests/**
        lib/python*/test/*
        lib/python*/tests/*
        # Exclude problematic Python test files that cause encoding errors
        **/badsyntax_*.py
        **/test_*.py
        
        [app@dev]
        title = %(title)s (Dev)
        
        [app@production]
        title = %(title)s
        android.release_artifact = aab
        EOF
    
    - name: Verify files and dependencies
      run: |
        echo "=== Project Structure ==="
        ls -la
        
        echo "=== Python syntax validation ==="
        python3 -m py_compile main.py
        python3 -m py_compile backend_detector.py  
        python3 -m py_compile config.py
        
        echo "=== Testing Python imports ==="
        python3 -c "
        print('Testing imports...')
        try:
            import kivy
            print(f'✅ Kivy: {kivy.__version__}')
        except ImportError as e:
            print(f'❌ Kivy: {e}')
            
        try:
            import requests
            print(f'✅ Requests: {requests.__version__}')
        except ImportError as e:
            print(f'❌ Requests: {e}')
            
        try:
            from backend_detector import BackendDetector
            print('✅ Backend detector imports OK')
        except ImportError as e:
            print(f'❌ Backend detector: {e}')
            
        try:
            from config import AppConfig, StorageManager
            print('✅ Config imports OK')
        except ImportError as e:
            print(f'❌ Config: {e}')
        "
        
        echo "✅ All validations passed"
    
    - name: Build APK with Buildozer
      run: |
        # Set all required environment variables
        export PYTHONUNBUFFERED=1
        export ANDROIDAPI=34
        export ANDROIDMINAPI=24
        export ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk
        export ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b
        export PATH=$PATH:$ANDROIDSDK/platform-tools:$ANDROIDSDK/tools/bin:$ANDROIDSDK/cmdline-tools/latest/bin
        
        # Clean previous builds
        buildozer android clean || true
        
        echo "=== Starting Build ==="
        echo "Environment configured for Android API $ANDROIDAPI, Min API $ANDROIDMINAPI"
        
        # Build with comprehensive error handling
        if buildozer android debug --verbose; then
            echo "✅ Build successful!"
            if [ -f bin/*.apk ]; then
                echo "✅ APK created:"
                ls -lh bin/*.apk
            else
                echo "❌ No APK found after successful build"
                ls -la bin/ || echo "bin/ directory missing"
                exit 1
            fi
        else
            echo "❌ Build failed"
            exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: kortahun-call-logger-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload success logs
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-success
        path: |
          .buildozer/android/platform/build-**/logs/
          .buildozer/android/platform/python-for-android/dist/*/build.log
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Debug on failure
      if: failure()
      run: |
        echo "=== Build Failure Debug ==="
        
        echo "=== Environment Check ==="
        env | grep -E "(ANDROID|JAVA|PYTHON)" | sort
        
        echo "=== Autotools Status ==="
        which libtoolize autoreconf
        ls -la /usr/share/aclocal/lt*.m4
        
        echo "=== Build Logs (last 50 lines) ==="
        find .buildozer -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null
        
        echo "=== System Resources ==="
        df -h && free -h
        
    - name: Upload failure logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-failure-detailed
        path: |
          .buildozer/
          buildozer.spec
          *.log
          *.py
        retention-days: 14
        if-no-files-found: ignore