name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.9'
  ANDROID_API_LEVEL: '30'
  ANDROID_BUILD_TOOLS_VERSION: '30.0.3'
  NDK_VERSION: '23.2.8568313'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Set up Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        
        # Install build dependencies
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          wget \
          curl \
          autoconf \
          automake \
          libtool \
          libtool-bin \
          pkg-config \
          gettext \
          zlib1g-dev \
          libssl-dev \
          libffi-dev \
          libsqlite3-dev \
          libbz2-dev \
          libreadline-dev \
          libncurses5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          liblzma-dev \
          ccache \
          zip \
          openjdk-${{ env.JAVA_VERSION }}-jdk
        
        # Install media dependencies
        sudo apt-get install -y \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          libegl1-mesa-dev
        
    - name: Setup Android SDK
      run: |
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        
        # Create SDK directory
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        
        # Download command-line tools
        cd "$ANDROID_SDK_ROOT/cmdline-tools"
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
        mv cmdline-tools latest
        rm cmdline-tools.zip
        
        # Add to PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/${{ env.ANDROID_BUILD_TOOLS_VERSION }}" >> $GITHUB_PATH
        
    - name: Cache Android SDK
      uses: actions/cache@v3
      with:
        path: ~/android-sdk
        key: android-sdk-${{ env.ANDROID_API_LEVEL }}-${{ env.NDK_VERSION }}-v3
        restore-keys: |
          android-sdk-${{ env.ANDROID_API_LEVEL }}-
          android-sdk-
        
    - name: Install Android SDK components
      run: |
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export JAVA_HOME=/usr/lib/jvm/java-${{ env.JAVA_VERSION }}-openjdk-amd64
        SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        
        # Accept licenses
        yes | $SDKMANAGER --licenses > /dev/null 2>&1 || true
        
        # Install SDK components
        $SDKMANAGER "build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}" || true
        $SDKMANAGER "platforms;android-${{ env.ANDROID_API_LEVEL }}" || true
        $SDKMANAGER "platform-tools" || true
        $SDKMANAGER "cmake;3.18.1" || true
        $SDKMANAGER "ndk;${{ env.NDK_VERSION }}" || true
        
        # Set NDK environment
        export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ env.PYTHON_VERSION }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-
          
    - name: Cache Buildozer directories
      uses: actions/cache@v3
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec', 'requirements.txt') }}-v3
        restore-keys: |
          ${{ runner.os }}-buildozer-v3-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        
        # Verify installations
        python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
        python -c "import kivymd; print(f'KivyMD version: {kivymd.__version__}')"
        python -c "import requests; print(f'Requests version: {requests.__version__}')"
        python -c "import buildozer; print('Buildozer installed successfully')"
        
    - name: Setup build environment
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}
        export NDK_HOME=$ANDROID_NDK_ROOT
        export JAVA_HOME=/usr/lib/jvm/java-${{ env.JAVA_VERSION }}-openjdk-amd64
        export JDK_HOME=$JAVA_HOME
        
        # Persist to GitHub environment
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "JDK_HOME=$JAVA_HOME" >> $GITHUB_ENV
        
        # Build tool settings
        echo "ANDROIDAPI=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
        echo "NDKAPI=21" >> $GITHUB_ENV
        echo "P4A_BOOTSTRAP=sdl2" >> $GITHUB_ENV
        
        # Verify environment
        echo "Environment verification:"
        echo "Java version: $(java -version 2>&1 | head -n 1)"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version 2>/dev/null || echo 'Unknown')"
        
    - name: Build APK
      run: |
        echo "Starting APK build..."
        
        # Set final environment
        export JAVA_HOME=/usr/lib/jvm/java-${{ env.JAVA_VERSION }}-openjdk-amd64
        export JDK_HOME=$JAVA_HOME
        export ANDROIDSDK=$ANDROID_SDK_ROOT
        export ANDROIDNDK=$ANDROID_NDK_ROOT
        export ANDROIDAPI=${{ env.ANDROID_API_LEVEL }}
        export NDKAPI=21
        
        # Clean previous builds
        buildozer android clean || echo "Clean failed (expected on first run)"
        
        # Build with timeout
        timeout 75m buildozer -v android debug 2>&1 | tee build.log
        BUILD_EXIT_CODE=$?
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "Build completed successfully!"
        elif [ $BUILD_EXIT_CODE -eq 124 ]; then
          echo "Build timed out after 75 minutes"
          tail -200 build.log
          exit 1
        else
          echo "Build failed with exit code: $BUILD_EXIT_CODE"
          tail -200 build.log
          exit 1
        fi
        
        # Find and copy APK
        echo "Checking for generated APK..."
        if find . -name "*.apk" -type f 2>/dev/null | head -1; then
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          APK_NAME=$(basename "$APK_FILE")
          
          echo "APK build successful!"
          echo "APK: $APK_NAME"
          echo "Size: $APK_SIZE"
          echo "Path: $APK_FILE"
          
          # Create bin directory and copy APK
          mkdir -p bin/
          cp "$APK_FILE" bin/
          echo "APK copied to bin/ directory"
          
          ls -la bin/
        else
          echo "No APK found after build"
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          exit 1
        fi
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          build.log
          bin/*.apk
          .buildozer/android/platform/build-*/outputs/apk/**/*.apk
        retention-days: 7
        
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: kortahun-united-apk-v2.0.0-${{ github.sha }}
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload to release
      if: github.event_name == 'release' && success()
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        name: "Kortahun United v${{ github.ref_name }}"
        body: |
          ## Kortahun United Android App v${{ github.ref_name }}
          
          ### Build Information
          - **Version:** ${{ github.ref_name }}
          - **Build:** ${{ github.sha }}
          - **Platform:** Android (API ${{ env.ANDROID_API_LEVEL }}+)
          - **Architecture:** arm64-v8a, armeabi-v7a
          
          ### Key Features
          - Real-time Call Log Tracking
          - Automatic Sync every 2 minutes
          - Instant new call detection
          - QR Code device registration
          - Enhanced UI with real-time updates
          - Secure backend synchronization
          - Comprehensive sync statistics
          
          ### System Requirements
          - **Android:** 5.0+ (API 21+)
          - **RAM:** 2GB+ recommended
          - **Storage:** 50MB+ free space
          - **Permissions:** Call log, Phone, Storage, Camera, Internet
          
          ### Installation
          1. Download the APK file
          2. Enable "Install from unknown sources"
          3. Install the APK file
          4. Grant required permissions
          5. Register device using QR code
          
          ---
          
          **Note:** This app requires call log permissions to function properly.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}