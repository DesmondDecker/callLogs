name: Build Android APK

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-
          
    - name: Cache Buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}-
          ${{ runner.os }}-buildozer-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-venv \
          openjdk-11-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          unzip \
          zip \
          ccache
          
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_PATH
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer cython==0.29.33
        pip install kivy kivymd requests pyjnius plyer certifi
        
    - name: Create requirements.txt if not exists
      run: |
        if [ ! -f requirements.txt ]; then
          cat > requirements.txt << EOF
        python3
        kivy>=2.1.0
        kivymd>=1.1.1
        requests>=2.28.0
        pyjnius>=1.4.2
        plyer>=2.1
        certifi>=2022.12.7
        EOF
        fi
        
    - name: Rename main Python file
      run: |
        # Buildozer expects main.py by default
        if [ -f paste.txt ]; then
          mv paste.txt main.py
        fi
        
    - name: Setup Buildozer
      run: |
        # Create buildozer global directory
        mkdir -p .buildozer_global
        export BUILDOZER_GLOBAL_DIR=$(pwd)/.buildozer_global
        
        # Initialize buildozer if spec doesn't exist
        if [ ! -f buildozer.spec ]; then
          buildozer init
          # Update spec with our settings
          sed -i 's/title = My Application/title = Call Log Sync/' buildozer.spec
          sed -i 's/package.name = myapp/package.name = calllogsync/' buildozer.spec
          sed -i 's/package.domain = org.example/package.domain = com.kortahun/' buildozer.spec
        fi
        
    - name: Determine build type
      id: build_type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref_type }}" == "tag" ]; then
          echo "type=release" >> $GITHUB_OUTPUT
        else
          echo "type=debug" >> $GITHUB_OUTPUT
        fi
        
    - name: Build APK (Debug)
      if: steps.build_type.outputs.type == 'debug'
      run: |
        export BUILDOZER_GLOBAL_DIR=$(pwd)/.buildozer_global
        export ANDROIDSDK=$(pwd)/.buildozer_global/android-sdk
        export ANDROIDNDK=$(pwd)/.buildozer_global/android-ndk
        export ANDROIDAPI=33
        export NDKAPI=21
        
        # Enable ccache for faster builds
        export USE_CCACHE=1
        export NDK_CCACHE=$(which ccache)
        
        buildozer android debug
        
    - name: Build APK (Release)
      if: steps.build_type.outputs.type == 'release'
      run: |
        export BUILDOZER_GLOBAL_DIR=$(pwd)/.buildozer_global
        export ANDROIDSDK=$(pwd)/.buildozer_global/android-sdk
        export ANDROIDNDK=$(pwd)/.buildozer_global/android-ndk
        export ANDROIDAPI=33
        export NDKAPI=21
        
        # Enable ccache for faster builds
        export USE_CCACHE=1
        export NDK_CCACHE=$(which ccache)
        
        buildozer android release
        
    - name: Sign APK (Release only)
      if: steps.build_type.outputs.type == 'release'
      run: |
        # Only run if we have signing secrets
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
          echo "Signing APK..."
          
          # Decode keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > release.keystore
          
          # Sign the APK
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore release.keystore \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            bin/*.apk "${{ secrets.KEY_ALIAS }}"
            
          # Align the APK
          ${ANDROID_HOME}/build-tools/33.0.0/zipalign -v 4 \
            bin/calllogsync-*-release-unsigned.apk \
            bin/calllogsync-release-signed.apk
            
          rm release.keystore
        else
          echo "No signing secrets found, skipping APK signing"
        fi
        
    - name: Find APK files
      id: find_apk
      run: |
        # Find the built APK files
        if [ "${{ steps.build_type.outputs.type }}" == "release" ]; then
          if [ -f bin/calllogsync-release-signed.apk ]; then
            echo "apk_path=bin/calllogsync-release-signed.apk" >> $GITHUB_OUTPUT
            echo "apk_name=calllogsync-release-signed.apk" >> $GITHUB_OUTPUT
          else
            APK_FILE=$(find bin -name "*.apk" -type f | head -1)
            echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
            echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT
          fi
        else
          APK_FILE=$(find bin -name "*debug*.apk" -type f | head -1)
          echo "apk_path=$APK_FILE" >> $GITHUB_OUTPUT
          echo "apk_name=$(basename $APK_FILE)" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk-${{ steps.build_type.outputs.type }}
        path: ${{ steps.find_apk.outputs.apk_path }}
        retention-days: 30
        
    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/build-*/logs/
          .buildozer/android/platform/build-*/gradle-project/build/outputs/logs/
        retention-days: 7
        
    - name: Create Release
      if: github.ref_type == 'tag' && steps.build_type.outputs.type == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_apk.outputs.apk_path }}
        name: Release ${{ github.ref_name }}
        body: |
          # Call Log Sync Android App - ${{ github.ref_name }}
          
          ## üì± What's New
          - Android Call Log synchronization
          - Real-time backend sync
          - Robust error handling and retry logic
          - Multiple backend URL support
          
          ## üìã Features
          - ‚úÖ Native Android call log access
          - ‚úÖ Automatic device registration  
          - ‚úÖ Background synchronization
          - ‚úÖ Connection testing and diagnostics
          - ‚úÖ Real-time status updates
          
          ## üîß Requirements
          - Android 5.0+ (API 21+)
          - Permissions: Call Log, Phone State, Contacts, Internet
          
          ## üì• Installation
          1. Download the APK file below
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK
          4. Grant required permissions when prompted
          
          Built with ‚ù§Ô∏è using Kivy and Python
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üéâ **Build Successful!**
            
            The Android APK has been built successfully for this PR.
            
            **Build Type:** ${{ steps.build_type.outputs.type }}
            **APK:** ${{ steps.find_apk.outputs.apk_name }}
            
            You can download the APK from the "Artifacts" section of this build.
            
            **Next Steps:**
            1. Download and test the APK on your Android device
            2. Verify all permissions are working correctly
            3. Test the sync functionality with your backend
            
            ---
            *This APK is for testing purposes only.*`
          })

  # Job to run tests (optional)
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install kivy kivymd requests
        
    - name: Run tests
      run: |
        # Create a simple test if none exist
        if [ ! -d tests ]; then
          mkdir tests
          cat > tests/test_basic.py << 'EOF'
        import unittest
        import sys
        import os

        # Add the parent directory to the path so we can import our app
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

        class TestBasic(unittest.TestCase):
            def test_imports(self):
                """Test that we can import the main modules"""
                try:
                    import kivy
                    import requests
                    self.assertTrue(True)
                except ImportError as e:
                    self.fail(f"Import failed: {e}")

        if __name__ == '__main__':
            unittest.main()
        EOF
        fi
        
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella