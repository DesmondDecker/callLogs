name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'  # Updated to Java 17 for better Android support
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 31
        build-tools: 31.0.0
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-
        
    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          python3-venv \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          liblzma-dev \
          openjdk-17-jdk \
          unzip \
          zlib1g-dev \
          autoconf \
          libtool \
          pkg-config \
          cmake
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer==1.5.0 cython==0.29.36
        pip install -r requirements.txt
        
    - name: Set Android environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/31.0.0" >> $GITHUB_ENV
        
    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Install required Android SDK components
      run: |
        echo "Installing Android SDK components..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-31"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;31.0.0"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "ndk;25.1.8937393"
        
        echo "Verifying installed components..."
        echo "Build-tools directory contents:"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build-tools directory not found"
        ls -la $ANDROID_SDK_ROOT/build-tools/31.0.0/ || echo "Build-tools 31.0.0 not found"
        
        echo "Checking for aidl tool:"
        which aidl || echo "aidl not in PATH"
        ls -la $ANDROID_SDK_ROOT/build-tools/31.0.0/aidl || echo "aidl not found in build-tools"
        
        echo "Platform-tools directory contents:"
        ls -la $ANDROID_SDK_ROOT/platform-tools/ || echo "Platform-tools directory not found"
        
    - name: Create buildozer spec file
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        # Application configuration
        title = Call Center Sync
        package.name = callcentersync
        package.domain = com.callcenter.sync

        # Source code settings
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json

        # Application version extracted from main.py
        version.regex = __version__ = ['"]([^'"]*)['"]
        version.filename = %(source.dir)s/main.py

        # Entry point
        source.main = main.py

        # Requirements - essential only
        requirements = python3,kivy==2.1.0,requests,pyjnius,android

        # Supported orientations
        orientation = portrait

        # Services (none needed for this app)
        services = 

        # Skip dist info
        skip_dist = 1

        [android]
        # Android API settings
        android.api = 31
        android.minapi = 21
        android.ndk = 25b
        android.sdk = 31

        # Accept SDK license
        android.accept_sdk_license = True

        # Permissions required by the app
        android.permissions = INTERNET,ACCESS_NETWORK_STATE,READ_CALL_LOG,READ_PHONE_STATE,READ_CONTACTS,WAKE_LOCK

        # Architecture - focus on common ones for CI
        android.archs = arm64-v8a,armeabi-v7a

        # Application metadata
        android.meta_data = 

        # Gradle dependencies (none needed)
        android.gradle_dependencies = 

        # Bootstrap
        p4a.bootstrap = sdl2

        # Build tools version
        android.gradle_repositories = google(), mavenCentral()

        [buildozer]
        # Buildozer settings
        log_level = 2
        warn_on_root = 1

        # Build directory
        build_dir = ./.buildozer

        # Binary directory  
        bin_dir = ./bin
        EOF
        
    - name: Initialize and build APK
      run: |
        # Set proper environment with build-tools in PATH
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/build-tools/31.0.0
        
        # Verify critical tools are available
        echo "Verifying build environment:"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Check for aidl specifically
        if [ -f "$ANDROID_SDK_ROOT/build-tools/31.0.0/aidl" ]; then
          echo "✅ aidl found at: $ANDROID_SDK_ROOT/build-tools/31.0.0/aidl"
        else
          echo "❌ aidl not found - listing build-tools contents:"
          find $ANDROID_SDK_ROOT -name "aidl" -type f 2>/dev/null || echo "No aidl found anywhere"
        fi
        
        # Build the APK with verbose output
        buildozer android debug --verbose
        
    - name: List built files
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "No bin directory found"
        echo "Looking for APK files:"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: call-center-sync-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-**/outputs/apk/**/*.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload build logs (on failure)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/build-*/logs/
          .buildozer/android/platform/python-for-android/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*.apk
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}