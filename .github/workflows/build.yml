name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Download and setup Android command-line tools
      run: |
        ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        
        # Create SDK directory structure
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        
        # Download command-line tools
        cd "$ANDROID_SDK_ROOT/cmdline-tools"
        wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
        mv cmdline-tools latest
        rm cmdline-tools.zip
        
        # Add to PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        
        # Verify sdkmanager is available
        ls -la "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        
    - name: Accept Android SDK licenses
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install Android build-tools
      run: |
        SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        
        # Install required Android components
        $SDKMANAGER "build-tools;34.0.0"
        $SDKMANAGER "platforms;android-33"
        $SDKMANAGER "platform-tools"
        
        # Verify installation
        echo "✅ Installed components:"
        ls -la "$ANDROID_SDK_ROOT/build-tools/" || echo "❌ build-tools not found"
        ls -la "$ANDROID_SDK_ROOT/platforms/" || echo "❌ platforms not found"
        ls -la "$ANDROID_SDK_ROOT/platform-tools/" || echo "❌ platform-tools not found"
        
    - name: Ensure build-tools in expected location
      run: |
        # Buildozer might also look for legacy tools structure
        LEGACY_TOOLS_PATH="$ANDROID_SDK_ROOT/tools/bin"
        mkdir -p "$LEGACY_TOOLS_PATH"
        
        # Create symlink to sdkmanager in legacy location if needed
        if [ ! -f "$LEGACY_TOOLS_PATH/sdkmanager" ]; then
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$LEGACY_TOOLS_PATH/sdkmanager"
        fi
        
        # Verify aidl is available in build-tools
        AIDL_PATH="$ANDROID_SDK_ROOT/build-tools/34.0.0/aidl"
        if [ -f "$AIDL_PATH" ]; then
          echo "✅ AIDL found at $AIDL_PATH"
        else
          echo "❌ AIDL not found at $AIDL_PATH"
        fi
      
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          autoconf \
          automake \
          libtool \
          libtool-bin \
          autoconf-archive \
          pkg-config \
          gettext
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install buildozer cython
        
    - name: Create buildozer.spec if not exists
      run: |
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Cache Buildozer directory in project
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-project-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-project-
          
    - name: Build APK with Buildozer
      run: |
        # Set all Android environment variables
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
        
        # Debug output
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "PATH=$PATH"
        
        # Verify tools are available
        which sdkmanager || echo "❌ sdkmanager not in PATH"
        ls -la "$ANDROID_SDK_ROOT/build-tools/34.0.0/aidl" || echo "❌ aidl not found"
        
        # Run buildozer
        buildozer android debug
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: kortahun-united-debug-${{ github.sha }}
        path: bin/*.apk
        
    - name: Upload APK to release (if release event)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}