name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v2
    
    - name: Cache Buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-v2
    
    - name: Clean potential corrupted autotools cache
      run: |
        # Clean any cached autotools files and regenerate aclocal
        sudo rm -rf /var/lib/aclocal-macros || true
        sudo aclocal --install --force || true
        # Verify critical autotools files exist
        echo "Checking for required autotools files:"
        ls -la /usr/share/aclocal/ltoptions.m4 || echo "ERROR: ltoptions.m4 missing"
        ls -la /usr/share/aclocal/ltsugar.m4 || echo "ERROR: ltsugar.m4 missing"
        ls -la /usr/share/aclocal/ltversion.m4 || echo "ERROR: ltversion.m4 missing"
        ls -la /usr/share/aclocal/lt~obsolete.m4 || echo "ERROR: lt~obsolete.m4 missing"
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Remove any existing potentially corrupted autotools
        sudo apt-get remove -y libtool automake autoconf || true
        # Install fresh autotools packages with all required files
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip
        sudo apt-get install -y libtool automake autoconf autotools-dev
        sudo apt-get install -y pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev m4 build-essential gettext-base
        # Verify ltoptions.m4 exists
        ls -la /usr/share/aclocal/ltoptions.m4 || echo "ltoptions.m4 still missing - will try to fix"
        # If still missing, reinstall libtool specifically
        if [ ! -f /usr/share/aclocal/ltoptions.m4 ]; then
          sudo apt-get install --reinstall libtool
        fi
        pip3 install --upgrade pip
        pip3 install buildozer cython==0.29.33
    
    - name: Setup Android SDK and NDK
      run: |
        # Clean any existing Android setup to avoid conflicts
        rm -rf $HOME/.buildozer/android/platform/android-sdk
        rm -rf $HOME/.buildozer/android/platform/android-ndk*
        
        # Create directories
        mkdir -p $HOME/.buildozer/android/platform
        
        # Download and setup Android SDK
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/cmdline-tools
        mv cmdline-tools $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest
        
        # Create compatibility symlink for Buildozer
        mkdir -p $HOME/.buildozer/android/platform/android-sdk/tools/bin
        ln -s $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        ln -s $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager $HOME/.buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # Set environment variables
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        
        # Accept all Android SDK licenses automatically
        yes | $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root=$HOME/.buildozer/android/platform/android-sdk
        
        # Install essential build-tools, platform-tools, and platforms
        $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/.buildozer/android/platform/android-sdk \
          "platform-tools" \
          "build-tools;34.0.0" \
          "platforms;android-33" \
          "platforms;android-21"
        
        # Download and setup Android NDK 25b (CRITICAL: Use NDK 25b, not older versions)
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip
        mv android-ndk-r25b $HOME/.buildozer/android/platform/android-ndk-r25b
        
        # Set environment variables - IMPORTANT: Point to the correct NDK version
        echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "ANDROIDAPI=33" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        
        # Verify installations
        echo "Verifying SDK installation:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/
        echo "Build-tools directory:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/build-tools/ || echo "Build-tools not found"
        echo "Platform-tools directory:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/platform-tools/ || echo "Platform-tools not found"
        echo "NDK directory:"
        ls -la $HOME/.buildozer/android/platform/android-ndk-r25b/ || echo "NDK not found"
    
    - name: Build with Buildozer
      run: |
        # Clean any previous failed builds
        buildozer android clean || true
        # Force regenerate autotools files
        export PYTHONUNBUFFERED=1
        buildozer android debug
      env:
        ANDROIDSDK: ${{ env.ANDROIDSDK }}
        ANDROIDNDK: ${{ env.ANDROIDNDK }}
        ANDROIDAPI: ${{ env.ANDROIDAPI }}
        ANDROIDMINAPI: ${{ env.ANDROIDMINAPI }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: call-log-monitor-apk
        path: bin/*.apk
        
    - name: List build directory contents (for debugging)
      if: failure()
      run: |
        echo "Build directory contents:"
        ls -la
        echo "Bin directory contents:"
        ls -la bin/ || echo "Bin directory not found"
        echo "Android platform contents:"
        ls -la $HOME/.buildozer/android/platform/ || echo "Platform directory not found"
        echo "SDK build-tools contents:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/build-tools/ || echo "Build-tools directory not found"